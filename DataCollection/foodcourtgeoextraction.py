# -*- coding: utf-8 -*-
"""FoodCourtGeoExtraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hY8ShUxj3HzN1jMFOHvjYHhLSVw2QyML
"""

import requests
import time
import csv
import os
import json
import pandas as pd
from google.colab import userdata

# File paths
EXCEL_FILE = "HDP_Hawker_and_coffeeshop.xlsx"
CLEANED_CSV_FILE = "cleaned_hawker_data.csv"
FINAL_CSV_FILE = "hawker_google_coordinates.csv"
FAILURE_LOG = "google_api_failures.json"
ADDRESS_CACHE_FILE = "address_cache.json"

GOOGLE_MAPS_API_KEY = userdata.get("KEY")

if not GOOGLE_MAPS_API_KEY:
    raise ValueError("🚨 Google Maps API key not found! Please set it in Colab using `userdata.set('KEY', 'your_api_key')`.")

GOOGLE_API_URL = "https://maps.googleapis.com/maps/api/geocode/json"

def load_address_cache():
    return json.load(open(ADDRESS_CACHE_FILE, "r")) if os.path.exists(ADDRESS_CACHE_FILE) else {}

def save_address_cache(cache):
    with open(ADDRESS_CACHE_FILE, "w") as f:
        json.dump(cache, f)

def load_failure_log():
    return json.load(open(FAILURE_LOG, "r")) if os.path.exists(FAILURE_LOG) else {}

def save_failure_log(failures):
    with open(FAILURE_LOG, "w") as f:
        json.dump(failures, f)

def clean_data(excel_file):
    print("📌 Cleaning hawker centre data...")

    df = pd.read_excel(excel_file, usecols=["Name of hawker centre/coffee\nshop", "Address"], engine="openpyxl")
    df = df.drop_duplicates().dropna()

    df["Address"] = df["Address"].str.strip()

    df.to_csv(CLEANED_CSV_FILE, index=False, encoding="utf-8")
    print(f"✅ Cleaned data saved to {CLEANED_CSV_FILE} ({len(df)} rows)")

    return df

session = requests.Session()

def get_coordinates_google(address, failure_log, cache):
    """Fetch latitude and longitude from Google Maps API, with caching and failure handling."""

    if address in cache:
        return cache[address]

    if address in failure_log:
        return None, None

    formatted_address = f"{address}, Singapore"

    params = {
        "address": formatted_address,
        "region": "SG",
        "key": GOOGLE_MAPS_API_KEY
    }

    try:
        response = session.get(GOOGLE_API_URL, params=params, timeout=5)
        data = response.json()

        if response.status_code == 200 and "results" in data and len(data["results"]) > 0:
            location = data["results"][0]["geometry"]["location"]
            cache[address] = (location["lat"], location["lng"])
            save_address_cache(cache)  # Save to cache
            return location["lat"], location["lng"]
        else:
            failure_log[address] = True
            save_failure_log(failure_log)  # Save failure log
            return None, None

    except Exception as e:
        failure_log[address] = True
        save_failure_log(failure_log)
        return None, None

def fetch_coordinates(df):
    """Fetch coordinates for each unique address using Google Maps API with progress tracking."""
    failure_log = load_failure_log()
    cache = load_address_cache()
    updated_results = []
    total_addresses = len(df)
    start_time = time.time()

    for index, row in enumerate(df.iterrows(), start=1):
        name = row[1]["Name of hawker centre/coffee\nshop"]
        address = row[1]["Address"]

        lat, lon = get_coordinates_google(address, failure_log, cache)
        updated_results.append([name, address, lat, lon])

        elapsed_time = time.time() - start_time
        estimated_total_time = (elapsed_time / index) * total_addresses
        estimated_remaining_time = estimated_total_time - elapsed_time

        print(f"🟢 [{index}/{total_addresses}] Processed: {address} | Lat: {lat}, Lon: {lon} "
              f"| Elapsed: {elapsed_time:.2f}s | ETA: {estimated_remaining_time:.2f}s")

        time.sleep(0.2)

    return updated_results

# ✅ Step 4: Save to CSV
def save_to_csv(csv_file, data):
    """Save cleaned data with coordinates to CSV."""
    with open(csv_file, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["Hawker Centre / Coffeeshop", "Address", "Latitude", "Longitude"])
        writer.writerows(data)
    print(f"✅ Coordinates saved to {csv_file} ({len(data)} rows)")

# ✅ Main Function
def main():
    df = clean_data(EXCEL_FILE)

    print("📌 Fetching missing coordinates via Google Maps API...")
    updated_results = fetch_coordinates(df)

    print("📌 Saving updated data to CSV...")
    save_to_csv(FINAL_CSV_FILE, updated_results)

    print("🎉 All done!")

if __name__ == "__main__":
    main()

import requests
import os
from google.colab import userdata
# Google Maps API Key (Set it as an environment variable for security)
GOOGLE_MAPS_API_KEY = userdata.get('KEY')  # Replace with your actual API key if not using env

# Test address (Change this to any location)
TEST_ADDRESS = "116 Aljunied Ave 2"

def test_google_maps_api(address):
    """Test if Google Maps API key works by fetching coordinates for a sample address."""
    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        "address": address,
        "region": "SG",  # Restrict to Singapore
        "key": GOOGLE_MAPS_API_KEY
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if response.status_code == 200:
            if "results" in data and len(data["results"]) > 0:
                location = data["results"][0]["geometry"]["location"]
                print(f"✅ Google Maps API Test Passed!")
                print(f"📍 Address: {address}")
                print(f"🌍 Coordinates: Latitude {location['lat']}, Longitude {location['lng']}")
                return True
            else:
                print("⚠️ No results found. Check if the address is valid.")
                return False
        else:
            print(f"❌ Google API Error: {data}")
            return False
    except Exception as e:
        print(f"🚨 Request Failed: {e}")
        return False

# Run the test
if __name__ == "__main__":
    print("🔍 Testing Google Maps API...")
    test_google_maps_api(TEST_ADDRESS)