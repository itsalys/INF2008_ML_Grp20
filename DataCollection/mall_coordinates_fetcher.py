# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hY8ShUxj3HzN1jMFOHvjYHhLSVw2QyML
"""

import requests
import time
import csv
import os
import difflib
import json

# File paths
MALL_LIST_FILE = "List_of_Malls.txt"
CSV_FILE = "mall_coordinates.csv"
FAILURE_LOG = "api_failures.json"

# API Keys (Replace with actual keys)
OSM_API_URL = "https://nominatim.openstreetmap.org/search" # Not so accurate but free
GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY"  # Replace with Google Maps API key

# Load API failure log
def load_failure_log():
    """Load previously failed APIs from the failure log."""
    if os.path.exists(FAILURE_LOG):
        with open(FAILURE_LOG, "r") as f:
            return json.load(f)
    return {"OSM": False, "Google": False}

# Save API failure log
def save_failure_log(failures):
    """Save the API failure log to avoid retrying failing APIs."""
    with open(FAILURE_LOG, "w") as f:
        json.dump(failures, f)

def get_coordinates_osm(mall_name, failure_log):
    """Try OpenStreetMap API unless it's marked as failed."""
    if failure_log["OSM"]:
        return None, None  # Skip if OSM is known to be failing

    try:
        params = {
            "q": f"{mall_name}, Singapore",
            "format": "json",
            "limit": 1,
            "countrycodes": "SG"
        }
        response = requests.get(OSM_API_URL, params=params, headers={"User-Agent": "MallLocator/1.0"})
        if response.status_code == 200:
            data = response.json()
            if data:
                return data[0]["lat"], data[0]["lon"]
    except Exception as e:
        print(f"‚ùå OSM Error for {mall_name}: {e}")

    failure_log["OSM"] = True  # Mark OSM as failed
    return None, None

def get_coordinates_google(mall_name, failure_log):
    """Try Google Maps API unless it's marked as failed."""
    if failure_log["Google"]:
        return None, None  # Skip if Google is known to be failing

    try:
        url = f"https://maps.googleapis.com/maps/api/geocode/json?address={mall_name},Singapore&region=SG&key={GOOGLE_MAPS_API_KEY}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if data["results"]:
                return data["results"][0]["geometry"]["location"]["lat"], data["results"][0]["geometry"]["location"]["lng"]
    except Exception as e:
        print(f"‚ùå Google API Error for {mall_name}: {e}")

    failure_log["Google"] = True  # Mark Google as failed
    return None, None

def get_coordinates(mall_name):
    """Smart function that remembers failing APIs and skips them in future runs."""
    failure_log = load_failure_log()

    lat, lon = get_coordinates_osm(mall_name, failure_log)
    if lat and lon:
        print(f"‚úÖ OSM: {mall_name} -> ({lat}, {lon})")
        save_failure_log(failure_log)  # Save any new failures
        return lat, lon

    lat, lon = get_coordinates_google(mall_name, failure_log)
    if lat and lon:
        print(f"‚úÖ Google: {mall_name} -> ({lat}, {lon})")
        save_failure_log(failure_log)
        return lat, lon

    print(f"‚ùå Not Found: {mall_name}")
    save_failure_log(failure_log)  # Save failures
    return None, None

def load_malls_from_file(file_path):
    """Read mall names and their regions from a text file."""
    regions = {}
    current_region = None
    with open(file_path, "r", encoding="utf-8") as file:
        for line in file:
            line = line.strip()
            if line:
                if line in ["Central", "East", "North", "North East", "North West", "South", "West"]:
                    current_region = line
                    regions[current_region] = []
                elif current_region:
                    regions[current_region].append(line)
    return regions

def load_existing_data(csv_file):
    """Load existing mall data from a CSV file if available."""
    existing_data = {}
    if os.path.exists(csv_file):
        with open(csv_file, "r", encoding="utf-8") as file:
            reader = csv.reader(file)
            next(reader)  # Skip header
            for row in reader:
                mall_name, region, lat, lon = row
                existing_data[mall_name.lower()] = [mall_name, region, lat, lon]
    return existing_data

def process_malls(regions, existing_data):
    """Process malls and update coordinates only for missing entries."""
    updated_results = []
    for region, malls in regions.items():
        for mall in malls:
            mall_cleaned = mall.split("(")[0].strip()
            existing_match = difflib.get_close_matches(mall_cleaned.lower(), existing_data.keys(), n=1, cutoff=0.8)
            if existing_match:
                existing_mall_name = existing_match[0]
                existing_region, lat, lon = existing_data[existing_mall_name][1:]
                if lat and lon:
                    print(f"‚è© Skipping: {mall_cleaned} (Already has coordinates)")
                else:
                    lat, lon = get_coordinates(mall_cleaned)
                updated_results.append([mall_cleaned, region, lat, lon])
            else:
                lat, lon = get_coordinates(mall_cleaned)
                updated_results.append([mall_cleaned, region, lat, lon])
            time.sleep(1)
    return updated_results

def save_to_csv(csv_file, data):
    """Save mall data to a CSV file."""
    with open(csv_file, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["Mall Name", "Region", "Latitude", "Longitude"])
        writer.writerows(data)
    print(f"‚úÖ Updated coordinates saved to {csv_file}")

def main():
    print("üìå Loading malls from file...")
    regions = load_malls_from_file(MALL_LIST_FILE)

    print("üìå Loading existing data...")
    existing_data = load_existing_data(CSV_FILE)

    print("üìå Processing malls and fetching missing coordinates...")
    updated_results = process_malls(regions, existing_data)

    print("üìå Saving updated data to CSV...")
    save_to_csv(CSV_FILE, updated_results)

    print("üéâ All done!")

if __name__ == "__main__":
    main()